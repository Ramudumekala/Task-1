module ALU (
    input [3:0] A,
    input [3:0] B,
    input [2:0] sel,
    output reg [3:0] result
);

always @(*) begin
    case (sel)
        3'b000: result = A + B;     // ADD
        3'b001: result = A - B;     // SUB
        3'b010: result = A & B;     // AND
        3'b011: result = A | B;     // OR
        3'b100: result = ~A;        // NOT A
        default: result = 4'b0000;
    endcase
end
module 
tb_ALU;
    reg [3:0] A, B;
    reg [2:0] sel;
    wire [3:0] result;

    ALU uut (
        .A(A),
        .B(B),
        .sel(sel),
        .result(result)
    );

    initial begin
        A = 4'b0101; B = 4'b0011;

        sel = 3'b000; #10;
        sel = 3'b001; #10;
        sel = 3'b010; #10;
        sel = 3'b011; #10;
        sel = 3'b100; #10;

        $finish;
    end
endmodule